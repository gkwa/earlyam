name: Build & Test
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: "01 13 * * SAT"
env:
  OTEL_SERVICE_NAME: build-and-test-pipeline
  OTEL_RESOURCE_ATTRIBUTES: cicd.pipeline.name=Build and Test Pipeline, cicd.pipeline.run.id=${{ github.run_id }}
  GHA_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  GHA_RUN_ID: ${{ github.event.workflow_run.id }}
  GHA_RUN_NAME: ${{ github.event.workflow_run.name }}
jobs:
  build:
    name: Build & Test
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Add these steps before using otel-cli
      - name: Install OpenTelemetry CLI
        run: |
          curl -L https://github.com/equinix-labs/otel-cli/releases/latest/download/otel-cli-linux-amd64 -o otel-cli
          chmod +x otel-cli
          sudo mv otel-cli /usr/local/bin/
      - name: Setup OpenTelemetry endpoint
        run: |
          export OTEL_EXPORTER_OTLP_ENDPOINT="https://otlp.nr-data.net:4318"
          export OTEL_EXPORTER_OTLP_HEADERS="api-key=${{ secrets.NEW_RELIC_LICENSE_KEY }}"
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed
        with:
          go-version: stable
      - name: Set GOVERSION environment variable (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "GOVERSION=$(go version)" >> $GITHUB_ENV
      - name: Set GOVERSION environment variable (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "GOVERSION=$(go version)" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build & Test
        run: |
          otel-cli span start \
            --name Build Go Project \
            --attribute cicd.pipeline.task.name=go-build \
            --attribute cicd.pipeline.task.type=build \
            --attribute cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-build
          go build -v
          otel-cli span end
          otel-cli span start \
            --name Run Go Tests \
            --attribute cicd.pipeline.task.name=go-test \
            --attribute cicd.pipeline.task.type=test \
            --attribute cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-test
          go test ./...
          otel-cli span end
      - uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf
      - name: Run GoReleaser
        if: runner.os == 'Linux'
        run: |
          otel-cli span start \
            --name GoReleaser Build \
            --attribute cicd.pipeline.task.name=goreleaser \
            --attribute cicd.pipeline.task.type=build \
            --attribute cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-release
          goreleaser release --snapshot --skip=publish --clean
          otel-cli span end
      - name: Colored Output Test
        if: runner.os == 'Linux'
        shell: script -q -e -c "bash {0}"
        run: |
          otel-cli span start \
            --name Color Test \
            --attribute cicd.pipeline.task.name=color-test \
            --attribute cicd.pipeline.task.type=test \
            --attribute cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-colortest
          go run main.go -- main.go
          otel-cli span end
