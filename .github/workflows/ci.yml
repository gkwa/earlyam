name: Build & Test
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: "01 13 * * SAT"
env:
  OTEL_SERVICE_NAME: build-and-test-pipeline
  OTEL_RESOURCE_ATTRIBUTES: cicd.pipeline.name=Build and Test Pipeline, cicd.pipeline.run.id=${{ github.run_id }}
  OTEL_EXPORTER_OTLP_HEADERS: api-key=${{ secrets.NEW_RELIC_LICENSE_KEY }}
  GHA_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  GHA_RUN_ID: ${{ github.event.workflow_run.id }}
  GHA_RUN_NAME: ${{ github.event.workflow_run.name }}
  GHA_DEBUG: ${{ secrets.GHA_DEBUG }}
jobs:
  build:
    name: Build & Test
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@cbb722410c2e876e24abbe8de2cc27693e501dcb
      - uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a
        with:
          go-version: stable
      - name: Install OpenTelemetry CLI
        run: |
          docker pull ghcr.io/equinix-labs/otel-cli:latest
          mkdir -p /tmp/otel-socket
      - name: Set GOVERSION environment variable (Linux/macOS)
        if: runner.os != 'Windows'
        run: echo "GOVERSION=$(go version)" >> $GITHUB_ENV
      - name: Set GOVERSION environment variable (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "GOVERSION=$(go version)" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build & Test
        run: |
          set -e
          # Start a background span server
          docker run -d --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span background \
            --service build-test --name "Build & Test Pipeline" --sockdir /tmp/otel-socket
          sleep 1

          docker run --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span event \
            --name "Build Go Project" \
            -a "cicd.pipeline.task.name=go-build,cicd.pipeline.task.type=build,cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-build" \
            --sockdir /tmp/otel-socket
          go build -v

          docker run --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span event \
            --name "Run Go Tests" \
            -a "cicd.pipeline.task.name=go-test,cicd.pipeline.task.type=test,cicd.pipeline.task.run.id=${GITHUB_RUN_ID}-test" \
            --sockdir /tmp/otel-socket
          go test ./...

          # End the background span
          docker run --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span end --sockdir /tmp/otel-socket
      - uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf
        if: startsWith(github.ref, 'refs/tags/')
      - name: Run GoReleaser
        if: startsWith(github.ref, 'refs/tags/') && runner.os == 'Linux'
        run: |
          docker run -d --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span background \
            --service goreleaser --name "GoReleaser Build" --sockdir /tmp/otel-socket
          sleep 1

          goreleaser release --snapshot --skip=publish --clean

          docker run --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span end --sockdir /tmp/otel-socket
      - name: Colored Output Test
        if: runner.os == 'Linux'
        shell: script -q -e -c "bash {0}"
        run: |
          docker run -d --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span background \
            --service colortest --name "Color Test" --sockdir /tmp/otel-socket
          sleep 1

          go run main.go -- main.go

          docker run --network host -v /tmp/otel-socket:/tmp/otel-socket \
            --env OTEL_EXPORTER_OTLP_HEADERS \
            ghcr.io/equinix-labs/otel-cli:latest span end --sockdir /tmp/otel-socket
